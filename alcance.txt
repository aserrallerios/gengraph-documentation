Alcance del proyecto GENgraph

1-Documentación (tengo dudas con el orden)
	1.1-Necesidad y oportunidad
	1.2-Stakeholders
	1.3-Objetivos	
	1.4-Datos Genealógicos
		1.4.1-Panorama actual
		1.4.2-Formatos de trasmisión de datos
			1.4.2.1-Especificación GEDCOM
			1.4.2.2-Especificación GEDCOM X
				1.4.2.2.1-Modelo de Datos
				1.4.2.2.2-XML
				1.4.2.2.3-Fichero GEDCOM X
			1.4.2.3-Otras especificaciones Gedcom (Gedcom 6.0, ...)
	1.5-Grafos
		1.5.1-Teoría de grafos
		1.5.1-Paradigma noSQL - GraphDB
		1.5.2-API Neo4J
	1.6-Propuesta tecnológica del sistema
		1.6.1-¿Por qué JAVA?
		1.6.2-Framework Web
		1.6.3-Diseño
			1.6.3.1-Modelo de clases (sólo código própio)
			1.6.3.2-Casos de uso
			1.6.3.3-Prototipos de la Web
	1.7-Herramientas
		1.7.1-Git
	1.X-Bibliografía

2-Requisitos del Sistema
	2.1-Web de importación/manipulación de datos genéticos mediante una BD en grafo
		2.1.1-Entrada y salida de datos
			2.1.1.1-El sistema debe leer ficheros formato GEDCOM 5
			2.1.1.2-El sistema adopta el estándar GEDCOM X y trabajará internamente con el modelo que propone GEDCOM X			
			2.1.1.3-El sistema debe permitir exportar los datos del grafo a un fichero 5 y X
			2.1.1.4-Se utilizarán las APIs de FAMILY SEARCH que permiten leer y escribir ficheros 5 y X			
		2.1.2-Almacenamiento de datos
			2.1.2.1-Se creará un módulo reutilizable capaz de almacenar datos GEDCOM X en una GraphDB
			2.1.2.2-Se utilizará la API neo4J
		2.1.3-Casos de uso
			2.1.3.1-Importar los datos de un fichero GEDCOM 5 o GEDCOM X
			2.1.3.2-Exportar los datos del grafo al formato GEDCOM 5 o GEDCOM X
			2.1.3.3-Operaciones sobre el grafo
				2.1.3.3.1-Editar atributos de entidades
				2.1.3.3.
		2.1.4-Documentación del código
			2.1.4.1-Javadoc
			2.1.4.2-Tests unitarios
		2.1.4-Código abierto
			2.1.4.1-Código en github
			2.1.4.2-Distribución Maven